{"version":3,"sources":["ts/components/Vision/index.tsx","ts/components/ToolItem/index.tsx","ts/containers/Home/index.tsx","serviceWorker.ts","index.tsx","Routes.tsx"],"names":["styles","fontSize","color","fontWeight","Vision","react_default","a","createElement","style","display","margin","ToolItem","_ref","url","name","rel","href","target","Home","state","list","content","padding","title","info","this","components_Vision","map","i","components_ToolItem","Object","assign","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","react_router","path","exact","component","containers","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAEMA,EAAgB,CAACC,SAAU,OAAQC,MAAO,UAAWC,WAAY,QAIxDC,EAFA,kBAAMC,EAAAC,EAAAC,cAAA,KAAGC,MAAOR,GAAV,YCGfQ,EAAe,CAACC,QAAS,eAAgBP,MAAO,UAAWQ,OAAQ,UAI1DC,EAFE,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,IAAKC,EAARF,EAAQE,KAAR,OAAyBT,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,KAAGC,MAAOA,EAAOO,IAAI,sBAAsBC,KAAMH,EAAKI,OAAO,UAAUH,KC2BvGI,6MA1BbC,MAAQ,CACNC,KAAM,CACJ,CAACN,KAAQ,mCAAWD,IAAK,0GAK3B,IAAMb,EAAgB,CACpBqB,QAAS,CAACC,QAAS,QACnBC,MAAO,CAACtB,SAAU,OAAQE,WAAY,QACtCqB,KAAM,CAACvB,SAAU,SAEXmB,EAASK,KAAKN,MAAdC,KACR,OACEf,EAAAC,EAAAC,cAAA,OAAKC,MAAQR,EAAOqB,SAClBhB,EAAAC,EAAAC,cAAA,OAAKC,MAAQR,EAAOuB,OAApB,+BACAlB,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAAA,OAAKC,MAAQR,EAAOwB,MAApB,yDAAoCnB,EAAAC,EAAAC,cAAA,WAApC,iDACAF,EAAAC,EAAAC,cAAA,WACGa,EAAKO,IAAI,SAACC,GAAD,OAAWvB,EAAAC,EAAAC,cAACsB,EAADC,OAAAC,OAAA,CAAUC,IAAKJ,EAAEd,MAAUc,eApBvCK,yBCGCC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbJC,IAASC,OAAOnC,EAAAC,EAAAC,cCID,kBACbF,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACEpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KACErC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAOC,KAAI,IAAOC,OAAK,EAACC,UAAWC,ODPzB,MAAYC,SAASC,eAAe,SDoI9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6a1fe3ce.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst styles:object = {fontSize: '14px', color: '#ffa940', fontWeight: 'bold'};\r\n\r\nconst Vision = () => <p style={styles}>V 3.1.0</p>;\r\n\r\nexport default Vision;\r\n","import React from 'react';\r\n\r\ninterface props {\r\n  url: string;\r\n  name: string;\r\n}\r\n\r\nconst style:object = {display: 'inline-block', color: '#b7eb8f', margin: '20px 0'}\r\n\r\nconst ToolItem = ({ url, name }:props) => <div><a style={style} rel=\"noopener noreferrer\" href={url} target=\"_blank\">{name}</a></div>;\r\n\r\nexport default ToolItem;\r\n","import React, { Component } from 'react';\r\nimport { Vision, ToolItem } from '../../components';\r\n\r\ninterface styles {\r\n  content: object;\r\n  title: object;\r\n  info: object;\r\n}\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    list: [\r\n      {'name': 'ED等级计算器', url: 'https://hyncao.github.io/ed/'},\r\n    ]\r\n  }\r\n\r\n  render(){\r\n    const styles:styles = {\r\n      content: {padding: '20px'},\r\n      title: {fontSize: '20px', fontWeight: 'bold'},\r\n      info: {fontSize: '16px'},\r\n    }\r\n    const { list } = this.state;\r\n    return (\r\n      <div style={ styles.content }>\r\n        <div style={ styles.title }>TT2工具集合</div>\r\n        <Vision />\r\n        <div style={ styles.info }>如果有疑问请联系我<br />qq 277148066，敲门砖：tt2</div>\r\n        <div>\r\n          {list.map((i:any) => <ToolItem key={i.name} {...i} />)}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './Routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\r\nimport {\r\n  Route, Switch, BrowserRouter,\r\n} from 'react-router-dom';\r\nimport * as containers from './ts/containers';\r\n\r\nimport './styles/normalize.scss';\r\nimport './styles/app.scss';\r\n\r\nexport default () => (\r\n  <BrowserRouter>\r\n    <Switch>\r\n      <Route path={`/`} exact component={containers.Home} />\r\n    </Switch>\r\n  </BrowserRouter>\r\n);\r\n"],"sourceRoot":""}